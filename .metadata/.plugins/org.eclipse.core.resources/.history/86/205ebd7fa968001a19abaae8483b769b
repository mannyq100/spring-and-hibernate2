package com.manny.AOPdemo.aspect;

import java.util.List;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.reflect.MethodSignature;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;

import com.manny.AOPdemo.Account;

@Aspect
@Component
@Order(2)
public class MyDemoLoggingAspect {

	//this is where we will add all related advises for logging
	@Around("execution()* com.manny.AOPdemo.service.AccountDao.findAccount(..)")
	public Object aroundLoggingAspect(ProceedingJoinPoint theProceedingJoinPoint) throws Throwable {
		
		//print out method we are advising on
		String method = theProceedingJoinPoint.getSignature().toShortString();
		System.out.println("\n=====>>> Executing @After (finally) on method: "+method);
		
		// begin the timestamp
		long begin = System.currentTimeMillis();
		
		// now lets execute the method
		Object result = theProceedingJoinPoint.proceed();
		
		//get the end timestamp
		long end = System.currentTimeMillis() ;
		
		long duration = end-begin;
		
		System.out.println("\n=====>>> Duration: "+duration/1000.0+" seconds");
		
		return result;
	}
	
	@After("execution(* com.manny.AOPdemo.service.*.getFortune(..))")
	public void afterFinallyFindAccountAdvise(JoinPoint theJoinPoint) {
		
		// print out which method we are advising on
		String method = theJoinPoint.getSignature().toShortString();
		System.out.println("\n=====>>> Executing @After (finally) on method: "+method);
	}
	
	@AfterThrowing(
			pointcut="execution(* com.manny.AOPdemo.dao.AccountDao.findAccount(..))",
			throwing="theExc"
			)
	public void afterThrowingFindAccountAdvise(JoinPoint theJoinPoint, Throwable theExc) {
		
		// print out which method we are advising on
				String method = theJoinPoint.getSignature().toShortString();
				System.out.println("\n=====>>> Executing @AfterThrowing on method: "+method);
				
				//print out the results of the method call
				System.out.println("\n=====>>> Executing @AfterThrowing on method: "+theExc);
		
	}
	
	//Add a new advise for @AfterReturningFindAccountAdvise()
	
	@AfterReturning(
			pointcut="execution(* com.manny.AOPdemo.dao.AccountDao.findAccount(..))",
			returning="result" )
	public void afterReturnFindAccountAdvise( JoinPoint theJoinPoint, List<Account> result) {
		
		
		// print out which method we are advising on
		String method = theJoinPoint.getSignature().toShortString();
		System.out.println("\n=====>>> Executing @AfterReturning on method: "+method);
		
		//print out the results of the method call
		System.out.println("\n=====>>> Executing @AfterReturning on method: "+result);
		
		// lets post-process the data .. lets modify it
		
		//convert the account name to uppercase
		convertAccountNameToUpperCase(result);
		
		System.out.println("\n=====>>> Result is "+result);


	}


	
	private void convertAccountNameToUpperCase(List<Account> result) {
	
		//loop through the accounts
		for(Account tempAccount:result) {
			String theUpperName = tempAccount.getName().toUpperCase();
			
			//update the name of the account
			tempAccount.setName(theUpperName);
		}	
	}



	@Before("com.manny.AOPdemo.aspect.AllAopExpressions.forDaoPackageNoGetterSetter()")
	public void beforeAccountAdvice(JoinPoint thejoinPoint) {
		
		System.out.println("\n======>>> Executing @before advise on AddAccount()!!");
		
		// display the method signature
		MethodSignature methodSig = (MethodSignature)thejoinPoint.getSignature();
		
		System.out.println("Method: "+methodSig);
		
		//display method arguments
		Object[] args = thejoinPoint.getArgs();
		
		// loop thru args
		for(Object tempArg: args) {
			System.out.println(tempArg);
			
			if(tempArg instanceof Account) {
				//downcast and print Account specific stuff
				Account theAccount = (Account) tempArg;
				
				System.out.println("account name "+theAccount.getName());
				System.out.println("account name "+theAccount.getLevel());

			}
		}
	}

	
}

